import streamlit as st
import pandas as pd
import tempfile
import os
from PIL import Image
import pytesseract
import cv2
import numpy as np
import re
from io import BytesIO
from modules.table_extractor import TableExtractor
from modules.excel_exporter import ExcelExporter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="OCR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    page_icon="üìÑ",
    layout="wide"
)

class SimpleOCR:
    def __init__(self):
        self.table_extractor = TableExtractor()
    
    def extract_text_from_image(self, image):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            img_array = np.array(image)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
            if len(img_array.shape) == 3:
                gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            else:
                gray = img_array
            
            # –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            enhanced = clahe.apply(gray)
            
            # OCR —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
            text = pytesseract.image_to_string(enhanced, lang='rus+eng')
            return text
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
            return ""
    
    def process_image(self, image):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        text = self.extract_text_from_image(image)
        if text.strip():
            return self.table_extractor.extract_from_text(text)
        return []

def resize_image_if_needed(image, max_size=(2000, 2000)):
    """–£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    if image.size[0] > max_size[0] or image.size[1] > max_size[1]:
        image.thumbnail(max_size, Image.Resampling.LANCZOS)
    return image

def main():
    st.title("üìÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    st.markdown("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ PDF —Å –ø–æ–º–æ—â—å—é OCR")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR
    if 'ocr' not in st.session_state:
        st.session_state.ocr = SimpleOCR()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.info("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        with st.expander("–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
            st.write("**–ê—Ä—Ç–∏–∫—É–ª—ã:**")
            st.code("A001-2024, B152-ST, C003")
            st.write("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:**")
            st.code("50 —à—Ç, 100 —à—Ç—É–∫, 25 –µ–¥–∏–Ω–∏—Ü")
            
        # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with st.expander("–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"):
            sample_df = pd.DataFrame([
                {"–ê—Ä—Ç–∏–∫—É–ª": "A001-2024", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ë–æ–ª—Ç –∫—Ä–µ–ø—ë–∂–Ω—ã–π –ú8—Ö40", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "50 —à—Ç"},
                {"–ê—Ä—Ç–∏–∫—É–ª": "B152-ST", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ì–∞–π–∫–∞ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è –ú10", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "100 —à—Ç"}
            ])
            st.dataframe(sample_df, use_container_width=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            accept_multiple_files=True,
            type=['png', 'jpg', 'jpeg'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5MB"
        )
        
        if uploaded_files:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            for i, file in enumerate(uploaded_files[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                image = Image.open(file)
                st.image(image, caption=file.name, width=200)
                if i == 2 and len(uploaded_files) > 3:
                    st.info(f"–ò –µ—â–µ {len(uploaded_files) - 3} —Ñ–∞–π–ª(–æ–≤)...")
    
    with col2:
        st.header("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞")
        
        if uploaded_files and st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary"):
            all_results = []
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, uploaded_file in enumerate(uploaded_files):
                status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {uploaded_file.name}...")
                
                try:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image = Image.open(uploaded_file)
                    image = resize_image_if_needed(image)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    results = st.session_state.ocr.process_image(image)
                    all_results.extend(results)
                
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uploaded_file.name}: {e}")
                
                progress_bar.progress((i + 1) / len(uploaded_files))
            
            status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if all_results:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(all_results)}")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame
                df = pd.DataFrame(all_results)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π", len(df))
                with col2:
                    unique_articles = len(df[df['–ê—Ä—Ç–∏–∫—É–ª'] != '']['–ê—Ä—Ç–∏–∫—É–ª'].unique())
                    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤", unique_articles)
                with col3:
                    filled_names = len(df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] != ''])
                    st.metric("–° –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏", filled_names)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.header("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                edited_df = st.data_editor(
                    df,
                    num_rows="dynamic",
                    use_container_width=True,
                    column_config={
                        "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn(
                            "–ê—Ä—Ç–∏–∫—É–ª",
                            help="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞",
                            max_chars=20,
                        ),
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn(
                            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                            help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                            max_chars=100,
                        ),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.TextColumn(
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü",
                            max_chars=20,
                        )
                    }
                )
                
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                if st.button("üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å Excel"):
                    try:
                        exporter = ExcelExporter()
                        excel_file = exporter.create_excel_download(edited_df)
                        
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª Excel",
                            data=excel_file,
                            file_name="extracted_data.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        st.success("Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.")

if __name__ == "__main__":
    main()